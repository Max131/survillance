---
import "plyr/dist/plyr.css";
import { Play, Download } from "lucide-astro";
import Poster from "@images/vp.webp";
---

<div
  class="landscape:grid landscape:sm:grid-cols-2 landscape:md:grid-cols-5 landscape:gap-4"
  x-data="videoList">
  <article
    class="sticky top-0 z-10 pt-5 bg-base-100 landscape:md:col-span-3 self-start">
    <video controls playsinline class="aspect-video" data-poster={Poster.src}>
      <source />
    </video>
  </article>

  <div class="portrait:my-5 landscape:md:col-span-2">
    <p
      class="alert alert-error alert-soft my-5"
      role="alert"
      x-show="hasError"
      x-cloak>
      Error al cargar, intenta <button
        class="btn btn-sm btn-error btn-outline"
        @click="loadVideos">recargar</button
      >
    </p>

    <ul class="list mb-8 bg-base-100" x-cloak>
      <li class="list-row p-4 pb-2 text-xs tracking-wide flex justify-between">
        <p>Recent videos</p>
        <button class="opacity-60 cursor-pointer" @click="loadVideos"
          >Reload list</button
        >
        <a class="opacity-60" href="/security/live/">Live view</a>
      </li>
      <li>
        <div class="flex justify-center py-8" x-show="isLoading">
          <span class="loading loading-dots loading-xl text-info mx-auto"
          ></span>
        </div>
      </li>

      <template x-if="!isLoading">
        <div class="contents">
          <template x-for="{video, cover} in list">
            <li class="list-row focus-within:ring-2 focus-within:ring-info">
              <div>
                <img
                  class="w-30 h-auto rounded-box skeleton aspect-video object-cover"
                  loading="lazy"
                  :src="`${basePath}${cover}`"
                  alt="Video preview"
                  x-data
                  @load="$el.classList.remove('skeleton')"
                  @error="$el.classList.remove('skeleton')"
                />
              </div>
              <div>
                <p>
                  <span class="font-semibold" x-text="video.split('_')[0]"
                  ></span>
                </p>
                <p>
                  <time
                    class="text-xs"
                    :datetime="video.split('_')[1].split('T')[0]"
                    x-text="video.split('_')[1].split('T')[0]"></time>
                </p>
                <p>
                  <time
                    class="text-xs"
                    :datetime="video.split('_')[1].split('T')[1].split('.')[0]"
                    x-text="video.split('_')[1].split('T')[1].split('.')[0].replaceAll('-',':')"
                  ></time>
                </p>
              </div>
              <div class="flex gap-2 items-end">
                <a
                  class="btn btn-sm btn-square btn-info btn-soft hover:text-white"
                  aria-label="Descargar video"
                  download
                  target="_blank"
                  :href="`${basePath}${video}`">
                  <Download />
                </a>
                <button
                  class="btn btn-sm btn-square btn-info btn-soft hover:text-white"
                  aria-label="Reproducir video"
                  @click="playVideo(video)">
                  <Play />
                </button>
              </div>
            </li>
          </template>
        </div>
      </template>
    </ul>
  </div>
</div>

<script>
  import Plyr from "plyr";

  const player = new Plyr("video", {
    controls: [
      "play",
      "progress",
      "current-time",
      "settings",
      "pip",
      "fullscreen",
    ],
    ratio: "16:9",
  });

  Alpine.data("videoList", () => ({
    isLoading: false,
    hasError: false,
    basePath: import.meta.env.PUBLIC_BASE_PATH,
    list: [],
    init() {
      this.isLoading = true;
      this.loadVideos();
    },
    loadVideos() {
      this.isLoading = true;
      this.hasError = false;
      fetch(import.meta.env.PUBLIC_VIDEO_LIST_API)
        .then((res) => res.json())
        .then((data) => {
          this.list = data.files;
        })
        .catch((err) => {
          this.hasError = true;
          console.log(err);
        })
        .finally(() => {
          this.isLoading = false;
        });
    },
    playVideo(video) {
      player.source = {
        type: "video",
        title: "Security video",
        sources: [
          {
            src: `${this.basePath}${video}`,
          },
        ],
      };

      player.play();
    },
  }));
</script>
